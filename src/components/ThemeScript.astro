---
import { SELECTORS } from "@/constants/dom";
import * as themeConstants from "@/constants/theme";
import { CONFIG_CLIENT } from "@/config/client";
import { getDefaultThemes } from "@/utils/ui/theme";

const { DEFAULT_MODE } = CONFIG_CLIENT;
const { THEME_META_TAG_SELECTOR } = SELECTORS;
const defaultThemes = getDefaultThemes();
---

{
  /* 
  Only responsible for proposing suggestions based on environment changes and broadcasting notifications.
  Each component can decide how to respond to this notification, achieving more flexible and centralized control.
  Inlined to avoid flash of white content.
  By default, Astro will process, optimize, and bundle any script and style tags.
  You can opt-out of this behavior with the is:inline directive.
*/
}
<script
  is:inline
  define:vars={{ themeConstants, defaultThemes, DEFAULT_MODE, THEME_META_TAG_SELECTOR }}
>
  const { MODES, THEMES, THEME_CONFIG } = themeConstants;
  const { DATA_ATTRIBUTE, CHANGE_EVENT, LOCAL_STORAGE_KEY } = THEME_CONFIG;

  const listeners = {
    timeoutId: null,
  };

  /**
   * @description used for event listener: is user prefer dark mode?
   */
  const darkModePreference = window.matchMedia("(prefers-color-scheme: dark)");

  /**
   * @description
   * @example 'dark' -> 'default-dark(default mode, default theme)'
   * @param {string} themeMode - The target theme mode ('light' or 'dark').
   * @returns {object} The default theme object for the given mode.
   */
  const getDefaultTheme = (themeMode) => defaultThemes[themeMode];

  /**
   * @description
   * @example 'default-light' -> 'default'
   * @param {string} themeName - The full name of the theme.
   * @returns {string | undefined} The prefix of the theme name, or undefined if not found.
   */
  const getThemeNamePrefix = (themeName) => themeName.split("-")?.[0];

  /**
   * @description get user theme, then traversal all prefix themes, and find the best match
   * @param {string} themeMode - The target theme mode ('light' or 'dark').
   * @returns {object} The best matching theme object for the new mode, or the default theme for that mode.
   */
  const getThemeFromMode = (themeMode) => {
    const currentTheme = getTheme();

    const newTheme = THEMES.find((theme) => {
      const currentThemePrefix = getThemeNamePrefix(currentTheme.name);
      const themePrefix = getThemeNamePrefix(theme.name);

      const isModeMatch = theme.mode === themeMode;
      const isThemeNameMatch =
        themePrefix && currentThemePrefix && themePrefix === currentThemePrefix;

      const isFound = isModeMatch && isThemeNameMatch;

      return isFound;
    });

    const defaultTheme = getDefaultTheme(themeMode);
    const resultTheme = newTheme ?? defaultTheme;

    return resultTheme;
  };

  /**
   * @description 'dark' | 'light' | null
   * @returns {string | null} The browser's preferred color scheme ('dark', 'light'), or null if no preference or not supported.
   */
  const getBrowserMode = () => {
    // note: even "darkModePreference.matches" is false, it doesn't automatically mean that the user prefers "light mode". The user may be in the "no-preference state", or their browser may not support this feature (although modern browsers all support it).
    const lightModePreference = window.matchMedia("(prefers-color-scheme: light)");

    let browserMode;

    switch (true) {
      case darkModePreference.matches:
        browserMode = MODES.dark;
        break;
      case lightModePreference.matches:
        browserMode = MODES.light;
        break;
      default:
        browserMode = null;
        break;
    }
    return browserMode;
  };

  /**
   * @description to get stored theme, if invalid, clear it
   * {name, mode}
   * @returns {object | null} The stored theme object, or null if not found or invalid.
   */
  const getStoredTheme = () => {
    const storedThemeString =
      typeof localStorage !== "undefined" && localStorage.getItem(LOCAL_STORAGE_KEY);

    if (!storedThemeString) return null;

    let storedTheme;
    try {
      storedTheme = JSON.parse(storedThemeString);
    } catch (_error) {
      localStorage.removeItem(LOCAL_STORAGE_KEY);
      return null;
    }

    // invalid theme
    if (!(storedTheme && storedTheme.name && storedTheme.mode)) {
      // clear stored invalid theme
      localStorage.removeItem(LOCAL_STORAGE_KEY);
      return null;
    }

    return storedTheme;
  };

  /**
   * @description to init theme, priority: stored mode > browser mode and theme > default app mode, config
   * {name, mode}
   * @returns {object} The determined theme object to be applied.
   */
  const getTheme = () => {
    // either from storage
    const storedTheme = getStoredTheme();
    if (storedTheme) return storedTheme;

    // or fallback to default theme for browser mode
    const browserMode = getBrowserMode();
    if (browserMode) {
      const defaultBrowserTheme = getDefaultTheme(browserMode);
      return defaultBrowserTheme;
    }

    // fallback to app default
    const defaultAppTheme = getDefaultTheme(DEFAULT_MODE);
    return defaultAppTheme;
  };

  /**
   * @description to set theme, validate theme, then update root class(dark or '') and data-theme
   * @param {object} newTheme - The theme object to be applied.
   */
  const setTheme = (newTheme) => {
    const validatedTheme = THEMES.find(
      (theme) => theme.name === newTheme.name && theme.mode === newTheme.mode
    );

    if (!validatedTheme) {
      return console.warn(
        `Invalid theme value '${JSON.stringify(newTheme)}' received. Expected ${JSON.stringify(THEMES)}.`
      );
    }

    const root = document.documentElement;

    const isDarkMode = root.classList.contains(MODES.dark);
    const existingTheme = {
      // get current theme name from 'data-theme' attribute
      name: root.getAttribute(DATA_ATTRIBUTE),
      mode: isDarkMode ? MODES.dark : MODES.light,
    };

    const isExistingTheme =
      newTheme.name === existingTheme.name && newTheme.mode === existingTheme.mode;

    // root already set to newTheme, exit early
    if (isExistingTheme) return;

    // update root class and data-theme
    root.setAttribute(DATA_ATTRIBUTE, newTheme.name);

    if (newTheme.mode === MODES.dark) {
      // add dark mode class if it's not already there
      if (!isDarkMode) root.classList.add(MODES.dark);
    } else {
      // light mode for newTheme
      // remove dark mode class if it's there
      if (isDarkMode) root.classList.remove(MODES.dark);
    }

    // save to storage
    if (typeof localStorage !== "undefined") {
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newTheme));
    }

    if (listeners.timeoutId) {
      clearTimeout(listeners.timeoutId);
      listeners.timeoutId = null;
    }

    // must have dealy for bg color to apply
    listeners.timeoutId = setTimeout(() => {
      updateMetaTag();
      listeners.timeoutId = null;
    }, 1000);
  };

  /**
   * @description to make sure meta tag content is updated with the correct bg color and for the purpose of serveing for browser to detect theme
   */
  const updateMetaTag = () => {
    // choose <body> as color source is a common convention, because it usually represents the "canvas" color of the page.
    const bodyElement = document.body;
    if (!bodyElement) return;

    const computedStyles = window.getComputedStyle(bodyElement);
    const bgColor = computedStyles.backgroundColor;

    const metaElement = document.querySelector(THEME_META_TAG_SELECTOR);
    if (!metaElement) return;

    metaElement.setAttribute("content", bgColor);
  };

  // initial setup
  setTheme(getTheme());

  // View Transitions hook to restore theme, the astro:after-swap event fires after the new page content has been swapped in
  // allows Astro sites to maintain the benefits of multi-page applications (like better SEO and initial load performance) while also providing smooth transitions between pages that are typically associated with SPAs.
  document.addEventListener("astro:after-swap", () => setTheme(getTheme()));

  // listen for theme-change custom event, fired in src/components/ThemeToggle.astro
  document.addEventListener(CHANGE_EVENT, (event) => {
    setTheme(event.detail.theme);
  });

  // listen for prefers-color-scheme change
  darkModePreference.addEventListener("change", (event) => {
    const newMode = event.matches ? MODES.dark : MODES.light;
    const newTheme = getThemeFromMode(newMode);

    // trigger event instead of setTheme(newTheme), for Links page
    const payload = { detail: { theme: newTheme } };
    // CustomEvent is a built-in JavaScript class that allows you to create custom events. new CustomEvent(eventName, {detail, ...options})
    const themeChangeEvent = new CustomEvent(CHANGE_EVENT, payload);

    document.dispatchEvent(themeChangeEvent);
  });
</script>
