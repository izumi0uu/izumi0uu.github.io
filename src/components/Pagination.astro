---
import {
  Pagination as ReactPagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/react/ui/Pagination";

import type { PaginationProps } from "@/types/common";

export interface Props extends PaginationProps, astroHTML.JSX.HTMLAttributes {
  showIfOnePage?: boolean;
}

const {
  showIfOnePage = false,
  url,
  currentPage,
  lastPage,
  start,
  end,
  total,
  class: className,
  ...props
} = Astro.props;

const { prev: prevUrl, current: currentUrl, next: nextUrl } = url;

// 获取基础 URL（确保末尾有斜杠）
const getBaseUrl = (url: string) => {
  // 移除末尾的页码（如果有）
  let baseUrl = url.replace(/\/\d+\/?$/, "");
  // 确保末尾有斜杠
  if (!baseUrl.endsWith("/")) {
    baseUrl += "/";
  }
  return baseUrl;
};

const baseUrl = getBaseUrl(currentUrl);

// 生成指定页码的 URL
const getPageUrl = (pageNum: number) => {
  if (pageNum === 1) {
    // 第一页直接返回基础 URL
    return baseUrl;
  } else {
    // 其他页面添加页码
    return `${baseUrl}${pageNum}`;
  }
};

// 检查是否有多页
const hasMoreThanOnePage = () => lastPage > 1;

// 生成页码数组
const pageNumbers = (length: number) => Array.from({ length }, (_, i) => i + 1);

// 智能生成显示的页码（最多显示5个页码）
const getVisiblePages = (currentPage: number, lastPage: number): number[] => {
  let pages: number[] = [];

  if (lastPage <= 5) {
    // 如果总页数不超过5页，显示所有页码
    pages = pageNumbers(lastPage);
  } else {
    // 如果总页数超过5页，智能显示
    if (currentPage <= 3) {
      // 当前页在前3页
      pages = [1, 2, 3, 4, 5];
    } else if (currentPage >= lastPage - 2) {
      // 当前页在后3页
      pages = [lastPage - 4, lastPage - 3, lastPage - 2, lastPage - 1, lastPage];
    } else {
      // 当前页在中间
      pages = [currentPage - 2, currentPage - 1, currentPage, currentPage + 1, currentPage + 2];
    }
  }

  return pages;
};

const visiblePages = getVisiblePages(currentPage, lastPage);
const showFirstEllipsis = visiblePages[0] > 1;
const showLastEllipsis = visiblePages[visiblePages.length - 1] < lastPage;

// 只在有多页或者 showIfOnePage 为 true 时显示分页
const shouldShowPagination = hasMoreThanOnePage() || showIfOnePage;
---

{
  shouldShowPagination && (
    <ReactPagination client:load>
      <PaginationContent>
        <!-- 上一页按钮 -->
        {prevUrl && (
          <PaginationItem>
            <PaginationPrevious href={prevUrl} />
          </PaginationItem>
        )}

        <!-- 第一页（如果不在可见页码中） -->
        {showFirstEllipsis && (
          <>
            <PaginationItem>
              <PaginationLink href={getPageUrl(1)} isActive={currentPage === 1}>
                1
              </PaginationLink>
            </PaginationItem>
            <PaginationItem>
              <PaginationEllipsis />
            </PaginationItem>
          </>
        )}

        <!-- 可见页码 -->
        {visiblePages.map((pageNum) => (
          <PaginationItem key={pageNum}>
            <PaginationLink href={getPageUrl(pageNum)} isActive={currentPage === pageNum}>
              {pageNum}
            </PaginationLink>
          </PaginationItem>
        ))}

        <!-- 最后一页（如果不在可见页码中） -->
        {showLastEllipsis && (
          <>
            <PaginationItem>
              <PaginationEllipsis />
            </PaginationItem>
            <PaginationItem>
              <PaginationLink href={getPageUrl(lastPage)} isActive={currentPage === lastPage}>
                {lastPage}
              </PaginationLink>
            </PaginationItem>
          </>
        )}

        <!-- 下一页按钮 -->
        {nextUrl && (
          <PaginationItem>
            <PaginationNext href={nextUrl} />
          </PaginationItem>
        )}
      </PaginationContent>
    </ReactPagination>
  )
}
