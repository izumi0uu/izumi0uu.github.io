---
import { Image } from "astro:assets";
import { render } from "astro:content";

import { getAllPostsWithReadingTime } from "@/modules/post/common";
import { getRandomPosts } from "@/modules/post/random";
// import { getHeadingsForTableOfContents } from '@/modules/post/table-of-contents';

import { default as PostLayout } from "@/layouts/Post.astro";
// import Giscus from '@/components/Giscus.astro';
// import PostListMore from '@/components/PostListMore.astro';
import PostMeta from "@/components/PostMeta.astro";
// import Share from '@/components/Share.astro';
// import TableOfContents from '@/components/TableOfContents.astro';
// import TagList from '@/components/TagList.astro';

import { DRAFT_TEXT } from "@/constants/data";
import { IMAGE_SIZES } from "@/constants/image";
import { ROUTES } from "@/constants/routes";
import { setTransitionSlug, TRANSITION_ELEMENT_IDS } from "@/constants/transitions";
import { SUPPORTED_LOCALES } from "@/config/i18n";

import { CONFIG_CLIENT } from "@/config/client";

import { getOpenGraphImagePath } from "@/libs/api/open-graph/image-path";

import type { Metadata } from "@/types/common";
import type { Post } from "@/types/post";

const { SITE_URL } = CONFIG_CLIENT;

export async function getStaticPaths() {
  const posts = await getAllPostsWithReadingTime();
  console.log(`生成博客详情页动态路由，文章数量: ${posts.length}`);

  const paths = [];

  // 遍历所有文章
  for (const post of posts) {
    // slug 格式如：2024/test-post-copy-4（包含斜杠）
    const cleanSlug = post.slug;

    // 为每种支持的语言创建路径
    for (const locale of SUPPORTED_LOCALES) {
      const randomPosts = getRandomPosts({ posts, excludeSlug: cleanSlug });

      // 使用Catch-All路由，slug参数会接收完整的路径（包含斜杠）
      paths.push({
        params: {
          lang: locale,
          slug: cleanSlug,
        },
        props: {
          ...post,
          routeLocale: locale,
          randomPosts,
        },
      });
    }
  }

  console.log(`总共生成 ${paths.length} 条博客详情页路由`);
  return paths;
}

const { data, readingTime, randomPosts } = Astro.props;
const {
  draft,
  title,
  publishDate,
  updatedDate,
  description,
  toc,
  heroImage,
  heroAlt,
  noHero,
  category,
  tags = [],
} = data;

const { slug } = Astro.params;
const { pathname } = Astro.url;

const { Content, headings: postHeadings, ...rest } = await render(Astro.props);

// 详细检查 render 返回值
console.log("=== RENDER 函数返回值检查 ===");
console.log("Content:", typeof Content, Content ? "✅ 存在" : "❌ 缺失");
console.log("headings:", postHeadings?.length || 0, "个标题");
console.log("rest 对象的所有属性:", Object.keys(rest));
console.log("remarkPluginFrontmatter:", rest.remarkPluginFrontmatter ? "✅ 存在" : "❌ 缺失");

// 检查特定插件的数据
if (rest.remarkPluginFrontmatter) {
  console.log("插件处理后的 frontmatter:", rest.remarkPluginFrontmatter);
}

// 检查其他可能的插件数据
Object.keys(rest).forEach((key) => {
  if (key !== "remarkPluginFrontmatter") {
    console.log(`额外的插件数据 - ${key}:`, rest[key]);
  }
});
console.log("================================");

// const headings = getHeadingsForTableOfContents(postHeadings);

const postMetaProps = {
  category,
  publishDate,
  readingTime,
  updatedDate,
};

const shareProps = {
  title,
  description,
  url: `${SITE_URL}${ROUTES.BLOG}${slug}`,
};

const getTransitionNameFromElementId = setTransitionSlug({ pageSlug: slug });

// handle all metadata here
// const image = getOpenGraphImagePath(pathname);

const metadata: Metadata = {
  title,
  description,
  // image
};
---

<PostLayout {metadata}>
  <Fragment slot="hero-image">
    {/* hero image 1280x720 max, 16:9 */}
    {/* aspect-[16/8] should stay to prevent too tall image */}
    {
      !noHero && (
        <div class="w-full h-full flex justify-center items-center">
          <Image
            {...IMAGE_SIZES.RESPONSIVE.POST_HERO}
            src={heroImage}
            alt={heroAlt}
            fetchpriority="high"
            loading={IMAGE_SIZES.RESPONSIVE.POST_HERO.loading}
            itemprop="image"
            class="block max-w-full h-auto aspect-[16/8] object-cover border-outline"
            transition:name={getTransitionNameFromElementId({
              elementId: TRANSITION_ELEMENT_IDS.POST_CARD.HERO_IMAGE,
            })}
          />
        </div>
      )
    }
  </Fragment>

  <Fragment slot="hero-text">
    <h1
      class="b-h1"
      transition:name={getTransitionNameFromElementId({
        elementId: TRANSITION_ELEMENT_IDS.POST_CARD.TITLE,
      })}
    >
      {title}
      {draft && <sup class="text-red-500 ml-1">{DRAFT_TEXT}</sup>}
    </h1>

    {
      description && (
        <p
          class="font-normal text-content text-xl md:text-2xl mb-6 md:mb-8"
          transition:name={getTransitionNameFromElementId({
            elementId: TRANSITION_ELEMENT_IDS.POST_CARD.DESCRIPTION,
          })}
        >
          {description}
        </p>
      )
    }

    <PostMeta
      {...postMetaProps}
      transition:name={getTransitionNameFromElementId({
        elementId: TRANSITION_ELEMENT_IDS.POST_CARD.META,
      })}
    />
  </Fragment>

  <Fragment slot="content">
    <Content />
  </Fragment>

  <Fragment slot="after-content">
    <div class="flex justify-between items-start gap-6 flex-col md:flex-row b-h2-mb">
      {
        tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {tags.map((tag) => (
              <span class="px-3 py-1 text-sm bg-primary-container text-on-primary-container rounded-full">
                {tag}
              </span>
            ))}
          </div>
        )
      }
    </div>
  </Fragment>

  <Fragment slot="more-posts">
    <div class="mt-12">
      <h2 class="text-2xl font-bold mb-6">More Posts</h2>
      {
        randomPosts.length > 0 && (
          <div class="grid gap-6 md:grid-cols-2">
            {randomPosts.slice(0, 4).map((post) => (
              <div class="border border-outline rounded-lg p-4">
                <h3 class="font-semibold mb-2">
                  <a href={`${ROUTES.BLOG}${post.slug}`} class="hover:text-primary">
                    {post.data.title}
                  </a>
                </h3>
                <p class="text-sm text-content opacity-75 line-clamp-2">{post.data.description}</p>
              </div>
            ))}
          </div>
        )
      }
    </div>
  </Fragment>
</PostLayout>
